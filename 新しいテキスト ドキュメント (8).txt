//
//
//#ifdef _DEBUG
////Debugモードの場合
//#pragma comment(lib,"C:\\opencv\\build\\x86\\vc12\\lib\\opencv_world300d.lib")            // opencv_core
//#else
////Releaseモードの場合
//#pragma comment(lib,"C:\\opencv\\build\\x86\\vc12\\lib\\opencv_world300.lib") 
//#endif
//
//#include <iostream>
//#include <fstream>
//#include <iomanip>
///*数値計算ライブラリ*/
//#define _USE_MATH_DEFINES
//#include <math.h>
///*可変長リストライブラリ*/
//#include <vector>
///*OpenCVライブラリ*/
//#include "opencv2/opencv.hpp"
//#include "opencv2/highgui/highgui_c.h"
//
//using namespace std;
//using namespace cv;
//
//class SingleClothoidCurve{
//	Point point_start;
//	Point vector_start;
//	double radius_start;
//	double curvature_start;
//
//	Point point_goal;
//	Point vector_goal;
//	double radius_goal;
//	double curvature_goal;
//
//	vector<Point2d> path;
//
//
//public:
//	void SetPoint(Point start, Point goal){
//		point_start = start;
//		point_goal = goal;
//	}
//	void SetAngle(double start, double goal){
//		radius_start = start;
//		radius_goal = goal;
//	}
//	void SetCurvature(double start, double goal){
//		curvature_start = start;
//		//		curvature_goal = (radius_goal  * radius_goal) / 2;
//	}
//	void SetVector(Point start, Point goal){
//		vector_start = start;
//		vector_goal = goal;
//	}
//	void CulcVector(Point start, Point goal){
//		vector_start = Point(cos(radius_start), sin(radius_start));
//		vector_goal = Point(cos(radius_goal), sin(radius_goal));
//	}
//	Point housenVectorLeft(Point vector_in){
//		Point out;
//		return out = Point(vector_in.x * cos(M_PI / 2) - vector_in.y * sin(M_PI / 2), vector_in.x * sin(M_PI / 2) + vector_in.y * cos(M_PI / 2));
//	}
//	Point housenVectorRight(Point vector_in){
//		Point out;
//		return out = Point(vector_in.x * cos(-M_PI / 2) - vector_in.y * sin(-M_PI / 2), vector_in.x * sin(-M_PI / 2) + vector_in.y * cos(-M_PI / 2));
//	}
//	void CreatePath(){
//		double S = 0;
//		double phi = 0;
//		double phi_0 = radius_start;
//		double phi_1 = radius_goal;
//		double phi_u = curvature_start;
//		double phi_v = phi_1 - phi_0 - phi_u;
//		double k = 0;
//		double r;
//		Point2d n = point_start;
//		double step = 0.01;
//
//		Mat image(Size(1024, 1024), CV_8U, Scalar::all(0));
//
//		for (S = 0; S <= 1; S += step){
//			cout << n << endl;
//			phi = phi_0 + phi_u * S + phi_v * S * S;
//			k = phi_u + 2 * phi_v * S;
//
//			n = n + Point2d(step * cos(phi), step * sin(phi));
//			image.at<unsigned char>(n * 200 + Point2d(500, 500)) = 255;
//
//
//		}
//
//		imshow("sss", image);
//		waitKey(0);
//	}
//
//};
//class TripleClothoidCurve{
//	/////////////////////////////////////////////////
//	//
//	// Private Variable
//	//
//	Point2d point_start;
//	Point2d vector_start;
//	double radius_start;
//	double curvature_start;
//
//	Point2d point_end;
//	Point2d vector_end;
//	double radius_end;
//	double curvature_end;
//
//	Point2d temp_point;
//
//	vector<Point2d> curve;
//
//	double h;
//	double r;
//
//	double max_line_length;
//	double max_a12;
//
//	double S1, S2;
//	double step_draw;
//	double step_integral_sin;
//	double step_integral_cos;
//	double step_search_a;
//	double step_search_h;
//	double accuracy_width;
//	double accuracy_length;
//
//	double t11, t12, t13, t21, t22, t23;
//	double a10, a11, a12, a20, a21, a22, a30, a31, a32;
//
//	double theta0;
//
//	double phi0;
//	double phi1;
//
//	double k0;
//	double k1;
//
//	double S;
//	double phi;
//	//
//	// Private Variable
//	//
//	/////////////////////////////////////////////////
//
//	/////////////////////////////////////////////////
//	//
//	// Private Function
//	//
//	void CalcParamA(){
//		a22 = (a12*(t11*t23 - t13*t21) + h*(k0*(t23 - t13) + k1*t13) - t23*(phi1 - phi0)) / (t13*t22 - t12*t23);
//		a32 = (a12*(t11*t22 - t12*t21) + h*(k0*(t22 - t12) + k1*t12) - t22*(phi1 - phi0)) / (t12*t23 - t13*t22);
//
//		a10 = phi0 - theta0;
//		a11 = k0 * h;
//
//		a20 = a10 + (a11 * S1) + (a12 * S1 * S1);
//		a21 = a11 + (2 * a12 * S1);
//
//		a30 = a20 + a21 * (S2 - S1) + a22 * (S2 - S1) * (S2 - S1);
//		a31 = a21 + 2 * a22 * (S2 - S1);
//	}
//	double SinPhi1(double x){
//		return sin(a10 + a11 * x + a12 * x * x);
//	}
//	double SinPhi2(double x){
//		return sin(a20 + a21 * (x - S1) + a22 * (x - S1) * (x - S1));
//	}
//	double SinPhi3(double x){
//		return sin(a30 + a31 * (x - S2) + a32 * (x - S2) * (x - S2));
//	}
//	double CosPhi1(double x){
//		return cos(a10 + a11 * x + a12 * x * x);
//	}
//	double CosPhi2(double x){
//		return cos(a20 + a21 * (x - S1) + a22 * (x - S1) * (x - S1));
//	}
//	double CosPhi3(double x){
//		return cos(a30 + a31 * (x - S2) + a32 * (x - S2) * (x - S2));
//	}
//	double IntegralSin(){
//		double ans = 0;
//		for (double S = 0; S < S1; S += step_integral_sin){
//			ans += (SinPhi1(S) + SinPhi1(S + step_integral_sin)) * step_integral_sin / 2;
//		}
//		for (double S = S1; S < S2; S += step_integral_sin){
//			ans += (SinPhi2(S) + SinPhi2(S + step_integral_sin)) * step_integral_sin / 2;
//		}
//		for (double S = S2; S < 1; S += step_integral_sin){
//			ans += (SinPhi3(S) + SinPhi3(S + step_integral_sin)) * step_integral_sin / 2;
//		}
//		return ans;
//	}
//	double IntegralCos(){
//		double ans = 0;
//		for (double S = 0; S < S1; S += step_integral_cos){
//			ans += (CosPhi1(S) + CosPhi1(S + step_integral_cos)) * step_integral_cos / 2;
//		}
//		for (double S = S1; S < S2; S += step_integral_cos){
//			ans += (CosPhi2(S) + CosPhi2(S + step_integral_cos)) * step_integral_cos / 2;
//		}
//		for (double S = S2; S < 1; S += step_integral_cos){
//			ans += (CosPhi3(S) + CosPhi3(S + step_integral_cos)) * step_integral_cos / 2;
//		}
//		return ans;
//	}
//	bool JadgeIntegral(){
//		if (abs(IntegralSin()) < accuracy_width){
//			if (abs(h * IntegralCos() - r) < accuracy_length){ return true; }
//		}
//		return false;
//	}
//	void SearchParamAH(){
//		a12 = 0;
//		h = r;
//		bool flag = false;
//		while (!flag){
//			for (h = r; h < max_line_length * r; h += step_search_h){
//				CalcParamA();
//				if (flag = JadgeIntegral()){ cout << a12 << " " << h << endl; break; }
//			}
//			if (flag){ break; }
//
//			a12 = -a12;
//			for (h = r; h < max_line_length * r; h += step_search_h){
//				CalcParamA();
//				if (flag = JadgeIntegral()){ break; }
//			}
//			if (flag){ break; }
//
//			a12 = -a12 + step_search_a;
//		}
//	}
//	double GetSolustionSin(){ return IntegralSin(); }
//	double GetSolustionCos(){ return h * IntegralCos() - r; }
//	bool ZeroCross(double in1, double in2){
//		if (in1 * in2 <= 0){
//			return true;
//		}
//		return false;
//	}
//	int SearchNest(double nest_initial_a, double nest_initial_h, double nest_max_a, double nest_max_h, double nest_step_a, double nest_step_h, vector<double> &list_a, vector<double> &list_h){
//		double solution_sin_1;
//		double solution_sin_2;
//		double solution_sin_3;
//		double solution_sin_4;
//
//		double solution_cos_1;
//		double solution_cos_2;
//		double solution_cos_3;
//		double solution_cos_4;
//
//		int flag;
//		int solution_counter = 0;
//
//		double loop_a = nest_initial_a;
//		double loop_h = nest_initial_h;
//
//		////////////////////////////////////////////////////////////////////////
//		////////////////////////////////////////////////////////////////////////
//
//
//		solution_counter = 0;
//		for (loop_h = nest_initial_h; loop_h < nest_max_h; loop_h += nest_step_h){
//			for (loop_a = nest_initial_a; loop_a < nest_max_a; loop_a += nest_step_a){
//				if (list_a.size()){ return 0; }
//				flag = 0;
//
//
//				a12 = loop_a;
//				h = loop_h;
//				CalcParamA();
//				solution_sin_1 = GetSolustionSin();
//				solution_cos_1 = GetSolustionCos();
//
//
//				a12 = loop_a + nest_step_a;
//				h = loop_h;
//				CalcParamA();
//				solution_sin_2 = GetSolustionSin();
//				solution_cos_2 = GetSolustionCos();
//
//
//				a12 = loop_a;
//				h = loop_h + nest_step_h;
//				CalcParamA();
//				solution_sin_3 = GetSolustionSin();
//				solution_cos_3 = GetSolustionCos();
//
//
//				a12 = loop_a + nest_step_a;
//				h = loop_h + nest_step_h;
//				CalcParamA();
//				solution_sin_4 = GetSolustionSin();
//				solution_cos_4 = GetSolustionCos();
//
//
//				flag += ZeroCross(solution_sin_1, solution_sin_2);
//				flag += ZeroCross(solution_sin_1, solution_sin_3);
//				flag += ZeroCross(solution_sin_2, solution_sin_4);
//				flag += ZeroCross(solution_sin_3, solution_sin_4);
//				flag += ZeroCross(solution_cos_1, solution_cos_2);
//				flag += ZeroCross(solution_cos_1, solution_cos_3);
//				flag += ZeroCross(solution_cos_2, solution_cos_4);
//				flag += ZeroCross(solution_cos_3, solution_cos_4);
//
//				if (flag >= 4){
//					if ((nest_step_h < accuracy_length) && (nest_step_a < accuracy_width)){
//						list_a.push_back(loop_a);
//						list_h.push_back(loop_h);
//						cout << loop_a << endl;
//						cout << loop_h << endl;
//						return 0;
//					}
//					SearchNest(loop_a, loop_h,
//						loop_a + nest_step_a, loop_h + nest_step_h,
//						nest_step_a / 10, nest_step_h / 10,
//						list_a, list_h);
//				}
//			}
//		}
//
//		return 0;
//	}
//	void SearchParamAHNext(){
//		vector<double> list_a;
//		vector<double> list_h;
//
//		////////////////////////////////////////////////////////////////////////
//		////////////////////////////////////////////////////////////////////////
//
//		SearchNest(-max_a12, r,
//			max_a12, max_line_length * r,
//			step_search_a, step_search_h,
//			list_a, list_h);
//
//
//
//		a12 = list_a[0];
//		h = list_h[0];
//		CalcParamA();
//		cout << "end" << endl;
//	}
//	bool SearchNestA(double a12_cu, double a12_pr, vector<double> &a12_list, double step){
//		double solution_width_curr;
//		double solution_width_prev;
//
//		double a12_curr;
//		double a12_prev;
//
//		step /= 10;
//		a12 = a12_pr;
//
//		solution_width_prev = GetSolustionSin();
//		a12_prev = a12_pr;
//
//		for (a12 = a12_pr + step; a12 <= a12_cu; a12 += step){
//			CalcParamA();
//			solution_width_curr = GetSolustionSin();
//			a12_curr = a12;
//
//			if (ZeroCross(solution_width_prev, solution_width_curr)){
//				if (abs(solution_width_curr - solution_width_prev) < 0.0000001){
//					a12_list.push_back(a12);
//					return 1;
//				}
//				if (SearchNestA(a12_curr, a12_prev, a12_list, step)){
//					return 1;
//				}
//			}
//
//			solution_width_prev = solution_width_curr;
//			a12_prev = a12;
//		}
//		return 0;
//	}
//	bool SearchNestH(double h_cu, double h_pr, vector<double> &h_list, double step){
//		double solution_length_curr;
//		double solution_length_prev;
//
//		double h_curr;
//		double h_prev;
//
//		step /= 10;
//		a12 = h_pr;
//
//		solution_length_prev = GetSolustionCos();
//		h_prev = h_pr;
//
//		for (h = h_pr + step; h <= h_cu; h += step){
//			CalcParamA();
//			solution_length_curr = GetSolustionCos();
//			h_curr = h;
//
//			if (ZeroCross(solution_length_prev, solution_length_curr)){
//				if (abs(solution_length_curr - solution_length_prev) < 0.001){
//					h_list.push_back(h);
//					return 1;
//				}
//				if (SearchNestH(h_curr, h_prev, h_list, step)){
//					return 1;
//				}
//			}
//
//			solution_length_prev = solution_length_curr;
//			h_prev = a12;
//		}
//		return 0;
//	}
//	void SearchParamAHAdvance(){
//		double solution_width_curr;
//		double solution_width_prev;
//
//		double solution_length_curr;
//		double solution_length_prev;
//
//		double a12_curr;
//		double a12_prev;
//
//		double h_curr;
//		double h_prev;
//
//		vector<double> a12_list;
//		vector<double> h_list;
//
//		a12 = 0;
//
//		CalcParamA();
//		solution_width_prev = GetSolustionSin();
//		a12_prev = a12;
//
//		for (a12 = -max_a12 + step_search_a; a12 <= max_a12; a12 += step_search_a){
//			CalcParamA();
//			solution_width_curr = GetSolustionSin();
//			a12_curr = a12;
//
//			if (ZeroCross(solution_width_prev, solution_width_curr)){
//				SearchNestA(a12_curr, a12_prev, a12_list, step_search_a);
//			}
//			a12 = a12_curr;
//
//			solution_width_prev = solution_width_curr;
//			a12_prev = a12;
//		}
//		cout << h << endl;
//
//		//h = r;
//		//a12 = *itr;
//		//CalcParamA();
//
//		//solution_length_prev = GetSolustionCos();
//		//h_prev = h;
//
//		//for (h = r + step_search_h; h <= r * max_line_length; h += step_search_h){
//		//	CalcParamA();
//		//	solution_length_curr = GetSolustionCos();
//		//	h_curr = h;
//
//		//	if (ZeroCross(solution_width_prev, solution_length_curr)){
//		//		SearchNestH(h_curr, h_prev, h_list, step_search_h);
//		//	}
//		//	h = h_curr;
//
//		//	solution_length_prev = solution_length_curr;
//		//	h_prev = h;
//		//}
//
//		for (int i = 0; i < a12_list.size(); i++){
//			printf("a12 %lf\n", a12_list[i]);
//		}
//	}
//	//
//	// Private Function
//	//
//	/////////////////////////////////////////////////
//public:
//
//	/////////////////////////////////////////////////
//	//
//	// Set
//	//
//	void SetMaxLineLength(double length){
//		max_line_length = length;
//	}
//	void SetMaxa12(double a12){
//		max_a12 = a12;
//	}
//	void SetPoint(Point2d start, Point2d end){
//		point_start = start;
//		point_end = end;
//
//		r = sqrt((point_end.x - point_start.x) * (point_end.x - point_start.x) + (point_end.y - point_start.y) * (point_end.y - point_start.y));
//		theta0 = atan2(point_end.y - point_start.y, point_end.x - point_start.x);
//	}
//	void SetAngle(double start, double end){
//		radius_start = start;
//		radius_end = end;
//
//		vector_start = Point2d(cos(radius_start), sin(radius_start));
//		vector_end = Point2d(cos(radius_end), sin(radius_end));
//
//		phi0 = radius_start;
//		phi1 = radius_end;
//
//	}
//	void SetCurvature(double start, double end){
//		curvature_start = start;
//		curvature_end = end;
//
//		k0 = curvature_start;
//		k1 = curvature_end;
//	}
//	void SetVector(Point2d start, Point end){
//		vector_start = start;
//		vector_end = end;
//	}
//	void SetStart(Point2d point, double angle, double curvature){
//		point_start = point;
//		radius_start = angle;
//		curvature_start = curvature;
//
//		vector_start = Point2d(cos(radius_start), sin(radius_start));
//	}
//	void SetEnd(Point2d point, double angle, double curvature){
//		point_end = point;
//		radius_end = angle;
//		curvature_end = curvature;
//
//		vector_end = Point2d(cos(radius_end), sin(radius_end));
//	}
//	void SetAccuracy(double width, double length, double integral_sin, double integral_cos, double search_a, double search_h){
//		accuracy_width = width;
//		accuracy_length = length;
//		step_integral_sin = integral_sin;
//		step_integral_cos = integral_cos;
//		step_search_a = search_a;
//		step_search_h = search_h;
//	}
//	void SetAccuracy(double width, double length, double integral_sin, double integral_cos){
//		accuracy_width = width;
//		accuracy_length = length;
//		step_integral_sin = integral_sin;
//		step_integral_cos = integral_cos;
//		step_search_a = max_a12 * 2 / 100;
//		step_search_h = ((max_line_length * r) - r) / 100;
//	}
//	void SetAccuracy(double width, double length){
//		accuracy_width = width;
//		accuracy_length = length;
//		step_integral_sin = 0.001;
//		step_integral_cos = 0.001;
//		step_search_a = max_a12 * 2 / 100;
//		step_search_h = ((max_line_length * r) - r) / 100;
//	}
//	void SetDrawStep(double step){
//		step_draw = step;
//	}
//	void SetS1S2(double in1, double in2){
//		S1 = in1;
//		S2 = in2;
//
//		t11 = -S1 * S1 + 2 * S1;
//		t12 = -S2 * S2 + 2 * S2 + S1 * S1 - 2 * S1;
//		t13 = S2 * S2 - 2 * S2 + 1;
//		t21 = 2 * S1;
//		t22 = 2 * S2 - 2 * S1;
//		t23 = 2 - 2 * S2;
//
//		a12 = 0;
//		h = 0;
//	}
//	//
//	// Set
//	//
//	/////////////////////////////////////////////////////
//
//	/////////////////////////////////////////////////////
//	//
//	// Create
//	//
//	void CreateCurve(){
//		S = 0;
//		phi = 0;
//		double step = step_draw;
//		temp_point = point_start;
//
//		vector<Point2d> curve_list;
//
//		SearchParamAHNext();
//		//		SearchParamAH();
//		curve.push_back(temp_point);
//		for (double S = step; S < S1; S += step){
//			phi = theta0 + a10 + a11 * S + a12 * S * S;
//
//			temp_point += h * Point2d(step * cos(phi), step * sin(phi));
//			curve.push_back(temp_point);
//		}
//		for (double S = S1; S < S2; S += step){
//			phi = theta0 + a20 + a21 * (S - S1) + a22 * (S - S1) * (S - S1);
//
//			temp_point += h * Point2d(step * cos(phi), step * sin(phi));
//			curve.push_back(temp_point);
//		}
//		for (double S = S2; S < 1; S += step){
//			phi = theta0 + a30 + a31 * (S - S2) + a32 * (S - S2) * (S - S2);
//
//			temp_point += h * Point2d(step * cos(phi), step * sin(phi));
//			curve.push_back(temp_point);
//		}
//		phi = theta0 + a30 + a31 * (1 - S2) + a32 * (1 - S2) * (1 - S2);
//		temp_point += h * Point2d(step * cos(phi), step * sin(phi));
//		curve.push_back(temp_point);
//	}
//	void CorrectEndPoint(){
//		Point2d difference = point_end - curve.back();
//
//		for (size_t i = 0; i < curve.size(); i++){
//			curve[i] = curve[i] + (difference  * (i / double(curve.size() - 1)));
//		}
//
//		//間違い
//		//for (vector<Point2d>::iterator itr = curve.begin(); itr < curve.end(); itr++){
//		//	*itr = *itr - point_start;
//		//}
//		//for (vector<Point2d>::iterator itr = curve.begin(); itr < curve.end(); itr++){
//		//	*itr = Point2d(itr->x * (point_end.x - point_start.x) / curve.back().x, itr->y * (point_end.y - point_start.y) / curve.back().y) + point_start;
//		//}
//	}
//	//
//	// Create
//	//
//	/////////////////////////////////////////////////////
//
//	/////////////////////////////////////////////////////
//	//
//	// OutPut
//	//
//	void PrintParam(){
//		cout << "S1  " << S1 << ", " << endl;
//		cout << "S2  " << S2 << ", " << endl;
//		cout << "a10 " << a10 << ", " << phi0 - theta0 << endl;
//		cout << "a11 " << a11 << ", " << k0 * h << endl;
//		cout << "a12 " << a12 << ", " << endl;
//		cout << "a20 " << a20 << ", " << a10 + a11 * S1 + a12 * S1 * S1 << endl;
//		cout << "a21 " << a21 << ", " << a11 + 2 * a12 * S1 << endl;
//		cout << "a22 " << a22 << ", " << (a12 * (t11 * t23 - t13 * t21) + h * (k0 * (t23 - t13) + k1 * t13) - (phi1 - phi0) * t23) / (t13 * t22 - t12 * t23) << endl;
//		cout << "a30 " << a30 << ", " << a20 + a21 * (S2 - S1) + a22 * (S2 - S1) * (S2 - S1) << endl;
//		cout << "a31 " << a31 << ", " << a21 + 2 * a22 * (S2 - S1) << endl;
//		cout << "a32 " << a32 << ", " << (a12 * (t11 * t22 - t12 * t21) + h * (k0 * (t22 - t12) + k1 * t12) - (phi1 - phi0) * t22) / (t12 * t23 - t13 * t22) << endl;
//		cout << "phi0 " << phi0 << ", " << a10 << endl;
//		cout << "phi1 " << phi1 << ", " << a30 + a31 * (1 - S2) + a32 * (1 - S2) * (1 - S2) << ", " << phi << endl;
//		cout << "theta0 " << theta0 << endl;
//		cout << "h   " << h << ", " << endl;
//		cout << "r   " << r << ", " << endl;
//		cout << "k0  " << k0 << ", " << a11 / h << endl;
//		cout << "k1  " << k1 << ", " << (a31 + 2 * a32 * (1 - S2)) / h << endl;
//		cout << "k0.1 " << (a11 + 2 * a12 * S1) / h << endl;
//		cout << "k0.2 " << (a21 + 2 * a22 * (S2 - S1)) / h << endl;
//
//		cout << "intesin " << IntegralSin() << endl;
//		cout << "intecos " << IntegralCos() << endl;
//		cout << "absh " << abs(r - h * IntegralCos()) << endl;
//		cout << "absa " << abs(IntegralSin()) << endl;
//		cout << "arival Point" << curve.back() << endl;
//	}
//	void PrintCurve(){
//		cout << curve << endl;
//	}
//	void FileOutCurve(){
//		ofstream ofs("ClothoidCurve.txt");
//		ofs << curve << endl;
//	}
//	void FileOutCurveForMATLAB1(){
//		ofstream ofs("ClothoidCurve.txt");
//
//		ofs << "path = [0, 1, 2, 3, 4, 5, 6, 7, ";
//		for (int i = 0; i < curve.size(); i += 12){
//			if (i){
//				ofs << ", ";
//			}
//			ofs << setprecision(36) << curve[i].x / 100;
//		}
//		ofs << ", " << (point_end.x / 100)
//			<< ", " << (point_end.x / 100) + 1
//			<< ", " << (point_end.x / 100) + 2
//			<< ", " << (point_end.x / 100) + 3
//			<< ", " << (point_end.x / 100) + 4
//			<< ", " << (point_end.x / 100) + 5
//			<< ", " << (point_end.x / 100) + 6
//			<< ", " << (point_end.x / 100) + 7
//			<< ", " << (point_end.x / 100) + 8
//			<< "; ..." << endl;
//
//		ofs << "        0, 0, 0, 0, 0, 0, 0, 0, ";
//		for (int i = 0; i < curve.size(); i += 12){
//			if (i){
//				ofs << ", ";
//			}
//			ofs << setprecision(36) << -curve[i].y / 100;
//		}
//		ofs << ", " << (-point_end.y / 100)
//			<< ", " << (-point_end.y / 100)
//			<< ", " << (-point_end.y / 100)
//			<< ", " << (-point_end.y / 100)
//			<< ", " << (-point_end.y / 100)
//			<< ", " << (-point_end.y / 100)
//			<< ", " << (-point_end.y / 100)
//			<< ", " << (-point_end.y / 100)
//			<< ", " << (-point_end.y / 100)
//			<< "]; " << endl;
//
//		//		getchar();
//
//	}
//	void FileOutCurveForCarSim(){
//		//ofstream ofs("ClothoidCurve.txt");
//		//int i, j = 0;
//		//for (i = 0; i < curve.size(); i++){
//		//	curve[i] /= 100;
//		//}
//		//ofs << "size" << curve.size() << endl;
//		//for (i = 0; i < curve.size(); i += 12){
//		//	ofs << curve[i].y << ", ";
//		//}
//		//ofs << endl;
//		//for (i = 0; i < curve.size(); i += 12){
//		//	ofs << -curve[i].x << ", ";
//		//	j++;
//		//}
//		//ofs << endl;
//		//ofs << j << endl;
//
//		ofstream ofs("ClothoidCurve.txt");
//		int i, j = 0;
//		for (i = 0; i < curve.size(); i++){
//			curve[i] /= 100;
//		}
//		for (i = 0; i < curve.size(); i++){
//			ofs << setprecision(36) << curve[i].x << ", ";
//		}
//		ofs << endl;
//		for (i = 0; i < curve.size(); i++){
//			ofs << setprecision(36) << curve[i].y << ", ";
//			j++;
//		}
//	}
//	void FileOutCSV(char *file_name){
//		ofstream ofs(file_name);
//		double length;
//		double theta;
//		ofs << curve[0].x << "," << curve[0].y << endl;
//		for (int i = 0; i < curve.size() - 2; i++){
//			theta = atan2(curve[i + 2].y - curve[i].y, curve[i + 2].x - curve[i].x) - atan2(curve[i + 1].y - curve[i - 1].y, curve[i + 1].x - curve[i - 1].x);
//			length = sqrt(pow(curve[i + 1].x - curve[i].x, 2) + pow(curve[i + 1].y - curve[i].y, 2));
//			ofs << curve[i].x << "," << curve[i].y << "," << theta / length << endl;
//		}
//		ofs << curve[curve.size() - 2].x << "," << curve[curve.size() - 2].y << endl;
//		ofs << curve[curve.size() - 1].x << "," << curve[curve.size() - 1].y << endl;
//	}
//	void ViewClothoid(){
//		Mat image(Size(1024, 1024), CV_8U, Scalar::all(0));
//		line(image, Point(0, 511), Point(1023, 511), Scalar(127), 1, CV_AA);
//		line(image, Point(511, 0), Point(511, 1023), Scalar(127), 1, CV_AA);
//		for (vector<Point2d>::iterator itr = curve.begin(); itr < curve.end(); itr++){
//			image.at<unsigned char>(Point2d(itr->x, -itr->y) + Point2d(511, 511)) = 255;
//		}
//
//		imshow("ClothoidCurve", image);
//		waitKey(0);
//	}
//	//
//	// OutPut
//	//
//	/////////////////////////////////////////////////////
//
//	/////////////////////////////////////////////////////
//	//
//	// UI
//	//
//	void UIInPut(){
//		double h, draw_step, S1, S2, start_x, start_y, start_angle, start_curvature, end_x, end_y, end_angle, end_curvature;
//
//
//		cout << "最長曲線長（始点終点の直線距離の何倍まで許容する？）：";
//		cin >> h;
//		cout << "曲線間隔：";
//		cin >> draw_step;
//		cout << "S1：";
//		cin >> S1;
//		cout << "S2：";
//		cin >> S2;
//		cout << "始点X座標：";
//		cin >> start_x;
//		cout << "始点Y座標：";
//		cin >> start_y;
//		cout << "始点角度：";
//		cin >> start_angle;
//		cout << "始点曲率：";
//		cin >> start_curvature;
//		cout << "終点X座標：";
//		cin >> end_x;
//		cout << "終点Y座標：";
//		cin >> end_y;
//		cout << "終点角度：";
//		cin >> end_angle;
//		cout << "終点曲率：";
//		cin >> end_curvature;
//
//		SetMaxLineLength(h);
//		SetDrawStep(draw_step);
//		SetAccuracy(0.001, 0.001, 0.1, 0.1, 0.01, 0.1);
//		SetS1S2(S1, S2);
//		SetPoint(Point2d(start_x, start_y), Point2d(end_x, end_y));
//		SetAngle(start_angle, end_angle);
//		SetCurvature(start_curvature, end_curvature);
//	}
//	//
//	// UI
//	//
//	/////////////////////////////////////////////////////
//};
//int main(){
//
//
//	//SingleClothoidCurve curve1;
//	//curve1.SetPoint(Point(0, 0), Point(10, 10));
//	//curve1.SetAngle(M_PI / 2, M_PI / 2);
//	//curve1.SetCurvature(-5, 0);
//	//curve1.CreatePath();
//
//	TripleClothoidCurve curve3;
//	curve3.SetMaxLineLength(3);
//	curve3.SetMaxa12(100);
//	curve3.SetDrawStep(0.001);
//	curve3.SetS1S2(0.25, 0.75);
//	curve3.SetPoint(Point2d(0, 0), Point2d(100, 10));
//	curve3.SetAccuracy(0.00001, 0.00001, 0.01, 0.01);
//	curve3.SetAngle(0, 0);
//	curve3.SetCurvature(0, 0);
//
//	//	curve3.UIInPut();
//	curve3.CreateCurve();
//
//	curve3.FileOutCSV("C:\\Users\\0133752\\Desktop\\Clothoid.csv");
//
//	//	curve3.CorrectEndPoint();
//	//	curve3.PrintCurve();
//	curve3.PrintParam();
//	curve3.ViewClothoid();
//	curve3.FileOutCurve();
//	curve3.FileOutCurveForMATLAB1();
//
//	return 0;
//}


///////////////////////////////////////////////////////
////
//// UI
////
//void UIInPut(){
//	double h, draw_step, S1, S2, start_x, start_y, start_angle, start_curvature, end_x, end_y, end_angle, end_curvature;
//
//
//	cout << "最長曲線長（始点終点の直線距離の何倍まで許容する？）：";
//	cin >> h;
//	cout << "曲線間隔：";
//	cin >> draw_step;
//	cout << "S1：";
//	cin >> S1;
//	cout << "S2：";
//	cin >> S2;
//	cout << "始点X座標：";
//	cin >> start_x;
//	cout << "始点Y座標：";
//	cin >> start_y;
//	cout << "始点角度：";
//	cin >> start_angle;
//	cout << "始点曲率：";
//	cin >> start_curvature;
//	cout << "終点X座標：";
//	cin >> end_x;
//	cout << "終点Y座標：";
//	cin >> end_y;
//	cout << "終点角度：";
//	cin >> end_angle;
//	cout << "終点曲率：";
//	cin >> end_curvature;
//
//	SetMaxLineLength(h);
//	SetDrawStep(draw_step);
//	SetAccuracy(0.001, 0.001, 0.1, 0.1, 0.01, 0.1);
//	SetS1S2(S1, S2);
//	SetPoint(Point2d(start_x, start_y), Point2d(end_x, end_y));
//	SetAngle(start_angle, end_angle);
//	SetCurvature(start_curvature, end_curvature);
//}
////
//// UI
////
///////////////////////////////////////////////////////